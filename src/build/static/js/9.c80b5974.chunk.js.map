{"version":3,"sources":["../node_modules/classnames/index.js","apis/index.js","views/member/book/Book.js"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","getRegion","a","axios","get","getRegionDistrict","province_id","postAvailability","data","headers","alert","console","log","post","postReserver","Book","props","useState","setTotalTables","table","name","id","date","Date","time","location","size","selection","setSelection","phone","email","idStaff","nameStaff","role","getDate","getMonth","getFullYear","reservationError","useEffect","dateTime","body","then","tables","filter","capacity","catch","err","message","noGutters","className","xs","sm","type","required","value","toISOString","split","onChange","e","isNaN","target","newSel"],"mappings":"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","file":"static/js/9.c80b5974.chunk.js","sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import axios from \"axios\";\r\n\r\n//Region list function\r\nexport const getRegion = async() =>\r\n    await axios.get(\"https://vapi.vnappmob.com/api/province\");\r\n\r\nexport const getRegionDistrict = async(province_id) =>\r\n    await axios.get(\r\n        `https://vapi.vnappmob.com/api/province/district/${province_id}`\r\n    );\r\n\r\n//Booking function\r\nexport const postAvailability = async(data, headers) => {\r\n    alert(\"Availability\");\r\n    console.log(data, headers);\r\n    return await axios.post(`http://localhost:5000/api/book/availability`, data, {\r\n        headers,\r\n    });\r\n};\r\nexport const postReserver = async(data, headers) => {\r\n    alert(\"Reserved\");\r\n    console.log(data, headers);\r\n    return await axios.post(\r\n        `http://localhost:5000/api/book/availability/reserve`,\r\n        data, {\r\n            headers,\r\n        }\r\n    );\r\n};","import React,{useState,useEffect} from \"react\";\r\nimport \"../../../assets/css/member/Book.css\";\r\nimport \"../../../assets/css/member/Main.css\";\r\n\r\nimport {\r\n  Col,\r\n  Row,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Input,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\n//\r\nimport { postAvailability,postReserver } from \"../../../apis\";\r\n//\r\nconst Table = React.lazy(() => import(\"./Table\"));\r\nconst Book = ({props}) => {\r\n  const [totalTables, setTotalTables] = useState([]);\r\n  // Selection\r\n  // member selection\r\n  const [selection, setSelection] = useState({\r\n    table: {\r\n      name: null,\r\n      id: null,\r\n    },\r\n    date: new Date(),\r\n    time: null,\r\n    location: \"Any Location\",\r\n    size: \"Standard\",\r\n  });\r\n  // member booking\r\n  const [booking, setBooking] = useState({\r\n    name: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n  });\r\n\r\n\r\n  //Constructor\r\n  //potential Locations and times\r\n  const [location] = useState([\"Any Location\", \"Floor 1\", \"Floor 2\", \"Ground\"]);\r\n  const [sizes] = useState([\"Vip\", \"Standard\"])\r\n  const [times] = useState([\r\n    \"9AM\",\r\n    \"10AM\",\r\n    \"11AM\",\r\n    \"1AM\",\r\n    \"2AM\",\r\n    \"3AM\",\r\n    \"4AM\",\r\n    \"5AM\",\r\n  ]);\r\n//   have not finished yet \r\n  const [staffs] = useState([\r\n    {\r\n        idStaff: \"01\",\r\n        nameStaff: `Nguyen Thai Hung 01`,\r\n        role: \"leader\",\r\n    },\r\n    {\r\n        idStaff: \"02\",\r\n        nameStaff: `Nguyen Thai Hung 02`,\r\n        role: \"staff\",\r\n    },\r\n    {\r\n        idStaff: \"03\",\r\n        nameStaff: `Nguyen Thai Hung 03`,\r\n        role: \"staff\",\r\n    },\r\n    {\r\n        idStaff: \"04\",\r\n        nameStaff: `Nguyen Thai Hung 04`,\r\n        role: \"admin\",\r\n    },\r\n    {\r\n        idStaff: \"01\",\r\n        nameStaff: `Le Hoang Loc 01`,\r\n        role: \"leader\",\r\n    },\r\n    {\r\n        idStaff: \"02\",\r\n        nameStaff: `Le Hoang Loc 02`,\r\n        role: \"staff\",\r\n    },\r\n    {\r\n        idStaff: \"03\",\r\n        nameStaff: `Le Hoang Loc 03`,\r\n        role: \"staff\",\r\n    },\r\n    {\r\n        idStaff: \"04\",\r\n        nameStaff: `Le Hoang Loc 04`,\r\n        role: \"admin\",\r\n    },\r\n])\r\n  const getDate = () => {\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    const date =\r\n      months[selection.date.getMonth()] +\r\n      \" \" +\r\n      selection.date.getDate() +\r\n      \" \" +\r\n      selection.date.getFullYear();\r\n    let time = selection.time > 12 ? time + 12 + \":00\" : time + \":00\";\r\n    console.log(time);\r\n    const datetime = new Date(date + \" \" + time);\r\n    return datetime;\r\n  };\r\n  //Baisc reservation \"validation\"\r\n  const [reservationError, setReservationError] = useState(false);\r\n  const getEmptyTables = () => {\r\n    let tables = totalTables.filter((table) => table.isAvailable);\r\n    return tables.length;\r\n  };\r\n  //call api\r\n  let headers = {\r\n    \"Content-Type\":\"application/json\"\r\n  }\r\n  useEffect(() =>{\r\n    //Post data\r\n    //selection from customer\r\n    if(selection.time && selection.date){\r\n      (async()=>{\r\n        let dateTime = getDate()\r\n        let body = {\r\n          // date\r\n          date:dateTime\r\n          // date:\"Nov 10 2021 12:01\"\r\n        }\r\n        await postAvailability(body,headers).then((data)=>{\r\n          console.log(data)\r\n          //capacity : [Standard,Vip]\r\n          let tables = data.tables.filter(table=>{\r\n            (selection.size ? selection.size===table.capacity : true)\r\n            (selection.location!== \"Any Location \" ? table.location ===selection.location\r\n            :true\r\n            )\r\n          })\r\n        setTotalTables(tables)\r\n        }).catch(err=>{          \r\n          console.log(`Cant post reservation : ${err.message}`)\r\n        })\r\n      })()\r\n    }\r\n  },[selection.time,selection.date,selection.size,selection.location])\r\n\r\n\r\n    //Reserved \r\n    //Customer's contact\r\n    const reserver = async()=>{\r\n      console.log(booking.email.length??booking.name.length??booking.phone.length)\r\n      if(booking.email.length??booking.name.length??booking.phone.length ===0){\r\n        console.log(\"Incomplete details\")\r\n        setReservationError(true)\r\n      }else{\r\n          const dateTime = getDate()\r\n          let body = {\r\n            ...booking,\r\n            date:dateTime,\r\n            table:selection.table.id,\r\n          }\r\n          postReserver(body,headers).then((data)=>{\r\n            console.log({\r\n              success:true,\r\n              message:data.data,\r\n            })\r\n            // nav to ThankYou.js\r\n            props.setPage(2)\r\n          }).catch(err=>{\r\n            console.log({\r\n              success:false,\r\n              message:err.message,\r\n            })\r\n            // nav to TryAgain.js\r\n            props.setPage(2)\r\n          })\r\n      }\r\n    }\r\n    // Select table\r\n    const selectTable = (table_name,table_id)=>{\r\n      setSelection({\r\n        ...selection,\r\n        table:{\r\n          name:table_name,\r\n          id:table_id,\r\n        }\r\n      })\r\n    }\r\n\r\n    //Handler data click\r\n    //Sizes\r\n    const handlerSizeDropDownClick=(type)=>{\r\n      let newSel = {\r\n        ...selection,\r\n        table:{\r\n          ...selection.table\r\n        },\r\n        size:type,\r\n      }\r\n      setSelection(newSel)\r\n    }\r\n    //Main\r\n    // sizes = [\"Vip\", \"Standard\"]\r\n    const getSizes = ()=>{\r\n      let newSizes=[]\r\n      sizes.forEach((type)=>{\r\n          newSizes.push(\r\n            <DropdownItem\r\n            key={type}\r\n            className=\"booking-dropdown-item\"\r\n            onClick={()=>handlerSizeDropDownClick(type)}\r\n            >{type}</DropdownItem>\r\n          )\r\n      })\r\n      return newSizes;\r\n    }\r\n\r\n    //Location\r\n    //location=[\"Any Location\", \"Floor 1\", \"Floor 2\", \"Ground\"]\r\n    const handlerLocateDropDownClick=(locate)=>{\r\n      let newSel = {\r\n        ...selection,\r\n        table:{\r\n          ...selection.table\r\n        },\r\n        location:locate,\r\n      }\r\n      setSelection(newSel)\r\n    }\r\n    // Main\r\n        const getLocations = ()=>{\r\n          let newLocations = [];\r\n          location.forEach((locate)=>{\r\n            newLocations.push(\r\n                <DropdownItem\r\n                key={locate}\r\n                className=\"booking-dropdown-item\"\r\n                onClick={()=>handlerLocateDropDownClick(locate)}\r\n                >{locate}</DropdownItem>\r\n              )\r\n          })\r\n          return newLocations;\r\n        }\r\n    // \r\n    //Time\r\n    //times=[\"9AM\",\"10AM\",\"11AM\",\"1AM\",\"2AM\",\"3AM\",\"4AM\",\"5AM\"]\r\n    const handlerTimeDropDownClick=(time)=>{\r\n      let newSel = {\r\n        ...selection,\r\n        table:{\r\n          ...selection.table\r\n        },\r\n        time:time,\r\n      }\r\n      setSelection(newSel)\r\n    }\r\n    // Main\r\n        const getTimes = ()=>{\r\n          let newTimes = [];\r\n          times.forEach((time)=>{\r\n            newTimes.push(\r\n                <DropdownItem\r\n                key={time}\r\n                className=\"booking-dropdown-item\"\r\n                onClick={()=>handlerTimeDropDownClick(time)}\r\n                >{time}</DropdownItem>\r\n              )\r\n          })\r\n          return newTimes;\r\n        }\r\n    // get table\r\n    const getTables = ()=>{\r\n      if(getEmptyTables()>0){\r\n        let tables =[]\r\n        totalTables.forEach(table=>{\r\n          if(table.isAvailable){\r\n            tables.push(\r\n              <Table\r\n              key={table._id}\r\n              id={table._id}\r\n              tableSize={table.capacity}\r\n              name={table.name}\r\n              empty\r\n              selectTable={selectTable}\r\n              />\r\n            )\r\n          }\r\n          else{\r\n            tables.push(\r\n              <Table\r\n              key={table._id}\r\n              id={table._id}\r\n              tableSize={table.capacity}\r\n              name={table.name}\r\n              selectTable={selectTable}\r\n              />\r\n            )\r\n          }\r\n        })\r\n        return tables;\r\n      }\r\n    }\r\n  return <div>\r\n    {/* Title */}\r\n      <Row noGutters className=\"text-center align-items-center pizza-cta\">\r\n        <Col>\r\n            <p className=\"looking-for-table book-table-bt\">\r\n              <span>\r\n              {!selection.table.id ?\"Book a table\" : \"Confirm Reservation\"}\r\n              </span>\r\n            </p>\r\n            <p className=\"selected-table\">\r\n              {selection.table.id ?\"You are booking table\" + selection.table.name : null}\r\n            </p>\r\n            {\r\n              reservationError ?(\r\n                <p className=\"reservation-error\">\r\n                    *Please fill out all of the details\r\n                </p>\r\n              ):null\r\n            }\r\n        </Col>\r\n      </Row>\r\n      {/* Select Box */}\r\n      {!selection.table.id ? <div className=\"reservation-stuff\">\r\n        {/* Select time */}\r\n            <Row noGutters className=\"text-center align-items-center\">\r\n              <Col xs=\"12\" sm=\"3\">\r\n              <input type=\"date\" \r\n              required=\"required\"\r\n              className=\"booking-dropdown\"\r\n              value={selection.date.toISOString().split(\"T\")[0]}\r\n              onChange={e=>{\r\n                if(!isNaN(new Date(new Date (e.target.value)))){\r\n                  let newSel ={\r\n                    ...selection,\r\n                    table:{\r\n                      ...selection.table\r\n                    },\r\n                    date:new Date(e.target.value)\r\n                  }\r\n                  setSelection(newSel)\r\n                }else{\r\n                  console.log(\"Invalid date\")\r\n                  let newSel ={\r\n                    ...selection,\r\n                    table:{\r\n                      ...selection.table\r\n                    },\r\n                    date:new Date()\r\n                  }\r\n                  setSelection(newSel)\r\n                }\r\n              }}\r\n              />\r\n\r\n              </Col>\r\n            </Row>\r\n      </div>\r\n      :null\r\n      }\r\n\r\n  </div>;\r\n};\r\n\r\nexport default Book;\r\n"],"sourceRoot":""}